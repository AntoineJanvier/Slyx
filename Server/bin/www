#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
let nodenet = require('net');
const socketManagement = require('../socket_management');

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const socketPort = 3895;

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);

let nodeSocket = nodenet.createServer((socket) => {
    console.log('Client connected');

    socket.on('data', function(data) {
        socketManagement.socketOnData(data, socket);
    });
    socket.on('end', function() {
        socketManagement.socketOnEnd();
    });
    socket.on('close', function() {
        socketManagement.socketOnClose();
    });
    socket.on('error', function(err) {
        socketManagement.socketOnError(err);
    });
});

server.on('listening', onListening);

/**
 * Initialization of socket
 */
// nodeSocket.on('connection', function (socket) {

//
// });

nodeSocket.listen(socketPort, function () {
    console.log('Socket server started at port ' + socketPort + '...');
    console.log();
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen')
        throw error;

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('NodeJS server started at port ' + addr.port + '...');
    debug('Listening on ' + bind);
}
