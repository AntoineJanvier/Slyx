#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
let nodenet = require('net');
const socketManagement = require('../tools/socket_management');
const clientHandler = require('../tools/clientRequestManager');
const objParser = require('../tools/objectParser');
const passwordHash = require('password-hash');

const models = require('../models');
const User = models.User;

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const socketPort = 3895;

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

let clients = [];

server.listen(port);
server.on('error', onError);

nodenet.createServer(function (socket) {
    console.log('SOCKET_CONNECTED');
    // socket.write(JSON.stringify({ status: 'ok' }));

    socket.on('data', function (data) {

        let json = JSON.parse(data);
        console.log();
        console.log();
        console.log('DATA');
        console.log(json);
        console.log();
        console.log();

        let resp = handleClientRequest(json);
        console.log();
        console.log('=============================================');
        console.log('RESPONSE');
        console.log('=============================================');
        console.log(resp);
        console.log();
        socket.write(resp + '\n');
    });
    
    socket.on('close', function () {
        console.log('SOCKET_CLOSED');
    });

    socket.on('error', function (err) {
        console.log('SOCKET_ERROR');
        console.log(err);
    });
}).listen(socketPort, '127.0.0.1');

server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen')
        throw error;

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('NodeJS server started at port ' + addr.port + '...');
    debug('Listening on ' + bind);
}

let handleClientRequest = function(jsonObj) {
    let r = {};
    switch (jsonObj.request) {
        case 'CONNECTION':
            return User.find({
                where: {'email': jsonObj.email}
            }).then(function (user) {
                if (user) {
                    if (passwordHash.verify(jsonObj.password, user.pwd)) {
                        console.log();
                        console.log('IN SEQUELIZE REQUEST');
                        console.log(user.responsify());
                        console.log();
                        console.log();
                        r = user.responsify();
                        return r;
                    } else {
                        console.log('Bad login input');
                        return {};
                    }
                } else {
                    console.log('No user');
                    return {};
                }
            }).catch(err => {
                console.log(err);
                return {};
            });
            break;
        default:
            return {};
    }
};