#!/usr/bin/env node

const send = require('../tools/answerToSockets');

/**
 * Module dependencies.
 */
let navigator = require('navigator');
let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
let nodenet = require('net');
const sock = require('../tools/socketManagement/socket_management');
const passwordHash = require('password-hash');

const models = require('../models');
const User = models.User;
const Contact = models.Contact;

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const socketPort = 3895;

app.set('navigator', navigator);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

let clients = [];
let nb_clients = 0;

server.listen(port);
server.on('error', onError);

nodenet.createServer(function (socket) {
    socket.setEncoding("utf8");
    /**
     * TODO : Add ping request to send to clients to know if they are connected
     */

    clients.push(socket);

    nb_clients++;

    socket.socketId = nb_clients;

    console.log('New client connected ! Total of ' + clients.length);

    socket.on('data', function (data) {
        data = data.split('\n');

        // Parse input
        for (let s of data) {
            if (s && s.length > 3) {
                let json = JSON.parse(s);

                // Switch JSON input
                switch (json.request) {
                    // Know if the client is up to date
                    case 'GET_UPDATE':
                        sock.getUpdate.getUpdate(socket);
                        break;
                    // Client connection
                    case 'CONNECTION':
                        sock.connect.connect(socket, json, clients);
                        break;
                    // Client loading its contacts
                    case 'GET_CONTACTS':
                        sock.getContacts.getContacts(socket, json);
                        break;
                    // Client want to add a new contact
                    case 'ADD_CONTACT':
                        sock.addNewContact.addNewContact(socket, json, clients);
                        break;
                    // Client loading new possible contacts
                    case 'GET_USERS_NOT_IN_CONTACT_LIST':
                        sock.getUsersNotInContactList.getUsersNotInContactList(socket, json);
                        break;
                    // Client want to print all contact requests
                    case 'GET_PENDING_CONTACT_REQUESTS':
                        sock.getPendingContactRequests.getPendingContactRequests(socket, json, clients);
                        break;
                    // Get messages of a specific contact
                    case 'GET_MESSAGES_OF_CONTACT':
                        sock.getMessagesOfContact.getMessagesOfContact(socket, json);
                        break;
                    case 'ACCEPT_CONTACT':
                        sock.acceptContactRequest.acceptContactRequest(socket, json, clients);
                        break;
                    case 'REJECT_CONTACT':
                        sock.rejectContactRequest.rejectContactRequest(socket, json);
                        break;
                    case 'SEND_MESSAGE':
                        sock.sendMessageToUser.sendMessageToUser(socket, json, clients);
                        break;
                    case 'GET_SETTINGS':
                        sock.getSettings.getSettings(socket, json);
                        break;
                    case 'UPDATE_SETTINGS':
                        sock.updateSettings.updateSettings(socket, json);
                        break;
                    case 'DISCONNECTION':
                        sock.disconnectUser.disconnectUser(socket, json, clients);
                        break;
                    case 'REMOVE_CONTACT':
                        sock.removeContactOfContactList.removeContactOfContactList(socket, json, clients);
                        break;
                    case 'CALL':
                        peer.on('open', function (id) {
                            socket.rtcPeerID = id;
                        });
                        send.toClient(clients, json.to, JSON.stringify({
                            ACTION: 'CALL_INCOMING',
                            FROM: json.from,
                            PEERID: socket.rtcPeerId
                        }));
                        break;
                    case 'ACCEPT_CALL':
                        send.toClient(clients, json.to, JSON.stringify({
                            ACTION: 'CALL_ACCEPTED',
                            FROM: json.from,
                            PEERID: socket.rtcPeerId
                        }));
                        break;
                    case 'REJECT_CALL':
                        send.toClient(clients, json.to, JSON.stringify({
                            ACTION: 'CALL_REJECTED',
                            FROM: json.from
                        }));
                        break;
                    default:
                        socket.write({ACTION: 'ERROR'} + '\n');
                }
            }
        }
    });

    socket.on('close', function () {
        for (let i = 0; i < clients.length; i++) {
            if (clients[i].socketId === socket.socketId) {
                if (clients[i].User) {
                    User.find({where: {
                        userid: clients[i].User.id
                    }}).then(user => {
                        return user.update(
                            {connected: false}, {fields: ['connected']}
                        ).then(user => {
                            console.log(user.first_name + ' ' + user.last_name + ' disconnected');
                            clients.splice(i, 1);
                            console.log(clients.length + ' clients connected');
                        });
                    }).catch(err => {
                        console.log('User can\'t be modified...');
                        throw err;
                    })
                } else {
                    console.log('Removing ' + clients[i].socketId + ' from clients...');
                    let a = clients.length;
                    clients.splice(i, 1);
                    console.log(a > clients.length ? 'Done !' : 'Error while removing client from client list...');
                    console.log(clients.length + ' clients connected');
                }
            }
        }
    });

    socket.on('error', function (err) {
        console.log('SOCKET_ERROR');
        console.log(err);
    });
}).listen(socketPort, '127.0.0.1');

server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen')
        throw error;

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('NodeJS server started at port ' + addr.port + '...');
    debug('Listening on ' + bind);
}
