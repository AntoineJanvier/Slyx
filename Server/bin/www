#!/usr/bin/env node

/**
 * Module dependencies.
 */
let app = require('../app');
let debug = require('debug')('server:server');
let http = require('http');
let nodenet = require('net');
const socketManagement = require('../tools/socket_management');
const passwordHash = require('password-hash');

const models = require('../models');
const User = models.User;
const Contact = models.Contact;

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const socketPort = 3895;

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

let clients = [];
let nb_clients = 0;

server.listen(port);
server.on('error', onError);

nodenet.createServer(function (socket) {
    socket.setEncoding("utf8");
    /**
     * TODO : Add ping request to send to clients to know if they are connected
     */

    clients.push(socket);

    nb_clients++;

    socket.socketId = nb_clients;

    console.log(clients.length + ' clients connected');

    socket.on('data', function (data) {
        data = data.split('\n');

        // Parse input
        for (let s of data) {
            if (s && s.length > 3) {
                let json = JSON.parse(s);

                // Switch JSON input
                switch (json.request) {
                    // Know if the client is up to date
                    case 'GET_UPDATE':
                        socketManagement.sockGetUpdate(socket);
                        break;
                    // Client connection
                    case 'CONNECTION':
                        socketManagement.sockConnect(socket, json, clients);
                        break;
                    // Client loading its contacts
                    case 'GET_CONTACTS':
                        socketManagement.sockGetContacts(socket, json);
                        break;
                    // Client want to add a new contact
                    case 'ADD_CONTACT':
                        socketManagement.sockAddNewContact(socket, json, clients);
                        break;
                    // Client loading new possible contacts
                    case 'GET_USERS_NOT_IN_CONTACT_LIST':
                        socketManagement.sockGetUsersNotInContactList(socket, json);
                        break;
                    // Client want to print all contact requests
                    case 'GET_PENDING_CONTACT_REQUESTS':
                        socketManagement.sockGetPendingContactRequests(socket, json, clients);
                        break;
                    // Get messages of a specific contact
                    case 'GET_MESSAGES_OF_CONTACT':
                        socketManagement.sockGetMessagesOfContact(socket, json);
                        break;
                    case 'ACCEPT_CONTACT':
                        socketManagement.sockAcceptContactRequest(socket, json, clients);
                        break;
                    case 'REJECT_CONTACT':
                        socketManagement.sockRejectContactRequest(socket, json);
                        break;
                    case 'SEND_MESSAGE':
                        socketManagement.sockSendMessageToUser(socket, json, clients);
                        break;
                    case 'GET_SETTINGS':
                        socketManagement.sockGetSettings(socket, json);
                        break;
                    case 'UPDATE_SETTINGS':
                        socketManagement.sockUpdateSettings(socket, json);
                        break;
                    default:
                        socket.write({ACTION: 'ERROR'} + '\n');
                }
            }
        }
    });

    socket.on('close', function () {
        for (let i = 0; i < clients.length; i++) {
            if (clients[i].socketId === socket.socketId) {
                clients.splice(i, 1);
            }
        }
        console.log('SOCKET_CLOSED');
    });

    socket.on('error', function (err) {
        console.log('SOCKET_ERROR');
        console.log(err);
    });
}).listen(socketPort, '127.0.0.1');

server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen')
        throw error;

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log('NodeJS server started at port ' + addr.port + '...');
    debug('Listening on ' + bind);
}
